라이브러리 ?
=> 어떠한 특정 기능을 모듈화 해놓은 것
- React는 라이브러리

프레임워크 ?
=> 어떠한 앱을 만들기 위해 필요한 대부분의 것을 가지고 있는 것
- Vue.js, Angular은 프레임 워크

⭐React는 사용자 인터페이스를 만들기 위한 JAvaScript 라이브러리⭐
- faceBook에서 만든 라이브러리
- 인터렉션(상호작용)이 많은 웹 앱 개발에 주로 사용

- 라우트(페이지이동) : react-router-dom
- 상태관리 : redux, recoil, mobx
- 테스트 : Jest, Mocha

✔️ 왜 리액트를 많이 사용하나?
- 상대적으로 배우기 쉬운 라이브러리
- 여러 기능들을 위해 이미 만들어져있는 라이브러리 환경
- 많은 기업들의 사용으로 검증 된 라이브러리 (대표적으로 faceBook)

✔️ 리액트 컴포넌트란?
- 리액트를 만들어진 앱을 이루는 최소한의 단위 (여러 컴포넌트 조각으로 이루어짐)
- 컴포넌트가 여러 개로 나누어져 있기 때문에 *재사용성* 증가
- 개발자들이 *병렬적*으로 개발이 가능

-> 클래스형 컴포넌트 (Class Components)
-> 함수형 컴포넌트 (Functional Components)

📌 가상돔 (Virtual DOM)

- 실제 돔과 같은 내용을 담고 있으며, 자바스크립트 객체 형태로 메모리에 저장되어 있는 복사본

- State가 변하면 가상 돔이 새로 생성 됨
    => 이전에 있는 가상 돔과 비교해서 바뀐 부분만 실제 돔에 적용시킴
    => 바뀐 부분을 찾는 과정(Diffing)
    => 바뀐 부분만 실제 돔에 적용시키는 것을 재조정(reconciliation)
    
- Batch Update
    => state를 업데이트 할 때, 한꺼번에 업데이트해서 화면이 한 번만 다시 그려지도록 함

📌 SPA (Single Page Application)

- 하나의 페이지를 가진 애플리케이션
- 웹 사이트의 전체 페이지를 하나의 페이지에 담아 동적으로 화면을 변경하며 표현현

✍️ 리액트 설치 : npx create-react-app ./ 
- npm 은 react 패키지를 local에 설치함
- npx 는 실행만 하고 저장 x (최신을 가져와서 사용하므로 버전 보장도 가능)
    - ./하면 해당 디렉토리에 설치하겠다는 것

✍️ 리액트 실행 : npm run start


- 리액트 자바스크립트의 시작점 : index.js
- src 안에 소스코드 작성 (화면에 보여지는 부분)
- package.json : 해당 프로젝트에 대한 정보 명시 (버전, 라이브러리, 이름 등)

- 확장프로그램 
    - ES7+ React/Redux/React-Native snippets 설치
        - class 컴포넌트 생성해줌 (rcc / rfc / rce + tab)