라이브러리 ?
=> 어떠한 특정 기능을 모듈화 해놓은 것
- React는 라이브러리

프레임워크 ?
=> 어떠한 앱을 만들기 위해 필요한 대부분의 것을 가지고 있는 것
- Vue.js, Angular은 프레임 워크

⭐React는 사용자 인터페이스를 만들기 위한 JAvaScript 라이브러리⭐
- faceBook에서 만든 라이브러리
- 인터렉션(상호작용)이 많은 웹 앱 개발에 주로 사용

- 라우트(페이지이동) : react-router-dom
- 상태관리 : redux, recoil, mobx
- 테스트 : Jest, Mocha

- 리액트 자바스크립트의 시작점 : index.js

- src 안에 소스코드 작성 (화면에 보여지는 부분)
    - src 부분에만 web pack 작동
    - src에 이미지 파일 넣는 게 조금 더 성능이 좋음 (public폴더에 사용하면 경로 작성이 편리)

- package.json : 해당 프로젝트에 대한 정보 명시 (버전, 라이브러리, 이름 등)

✔️ 왜 리액트를 많이 사용하나?
- 상대적으로 배우기 쉬운 라이브러리
- 여러 기능들을 위해 이미 만들어져있는 라이브러리 환경
- 많은 기업들의 사용으로 검증 된 라이브러리 (대표적으로 faceBook)

✔️ 리액트 컴포넌트란?
- 리액트를 만들어진 앱을 이루는 최소한의 단위 (여러 컴포넌트 조각으로 이루어짐)
- 컴포넌트가 여러 개로 나누어져 있기 때문에 *재사용성* 증가
- 개발자들이 *병렬적*으로 개발이 가능

-> 클래스형 컴포넌트 (Class Components) : 상대적으로 조금 더 긴 코드와 낮은 성능
-> 함수형 컴포넌트 (Functional Components)

📌 가상돔 (Virtual DOM)

- 실제 돔과 같은 내용을 담고 있으며, 자바스크립트 객체 형태로 메모리에 저장되어 있는 복사본

- State가 변하면 가상 돔이 새로 생성 됨
    => 이전에 있는 가상 돔과 비교해서 바뀐 부분만 실제 돔에 적용시킴
    => 바뀐 부분을 찾는 과정(Diffing)
    => 바뀐 부분만 실제 돔에 적용시키는 것을 재조정(reconciliation)
    
- Batch Update
    => state를 업데이트 할 때, 한꺼번에 업데이트해서 화면이 한 번만 다시 그려지도록 함

📌 SPA (Single Page Application)

- 하나의 템플릿(index.html)을 가진 애플리케이션
    - root 라는 요소를 JS를 이용하여 접근한 후, 엘리먼트를 생성해서 화면에 보여줌
    - 즉, 페이지가 하나임 !
- 웹 사이트의 전체 페이지를 하나의 페이지에 담아 동적으로 화면을 변경하며 표현

✔️ MPA (Multi Page Appllication)
    => 여러 개의 템플릿(HTML)을 이동하면서 페이지를 보여주는 애플리케이션

📌 JSX (Javascript syntax extension)

- 자바스크립트의 확장 문법
- 자바스크립트(logic)와 HTML구조(MarkUp)을 동시에 사용할 수 있음
    => 기본 UI에 데이터가 변하는 것과 이벤트 처리 등을 쉽게 구현 가능

- JSX로 작성하면, 바벨이 리액트 엘리먼트로 Diffing & 재조정을 통해 화면에 보이도록 변환
    => 모든 UI를 만들때 마다, createElement를 이용해 컴포넌트를 만들 수 없으므로 바벨이 다시 createElement로 바꿔 사용

- JSX는 컴포넌트에 여러 엘리먼트 요소가 있다면, 반드시 부모 요소 하나로 감싸주어야 함!
    => <div> JSX내용 </div>
 
    ✔️ JSX Key 속성
    - 리액트에서 요소의 리스트를 나열할 떄는 Key를 넣어주어야 함
    - 키는 React가 변경, 추가 ot 제거된 항목을 식별하는 데 도움을 줌
    => 요소에 안정적인 ID를 부여하려면, 배열 내부의 요소에 Key를 제공해야 함 !
    

📌 props (Properties)

- 상속하는 부모 컴포넌트로부터 자녀 컴포넌트에 데이터 등을 전달하는 방법
- ** 읽기전용(immutable) **
    - 자녀 컴포넌트에서는 변환할 수 x
    - 바꾸기 위해서는 부모 컴포넌트에서 state 변경 필요

📌 React State (상태값)

- 컴포넌트의 렌더링 결과물에 영향을 주는 데이터를 갖고 잇는 객체
- State가 변경되면, 컴포너트는 리렌더링(Re-rendering) 됨 !
    - State는 컴포넌트 안에서 관리

📌 constructor (생성자)

- 인스턴스화된 객체에서 다른 메서드를 호출하기 전에 수행해야 하는 사용자 지정 초기화 제공 가능
- 클래스를 new를 사용하여 인스턴스 객체로 생성하면, 넘겨받은 인수와 함께 constructor가 먼저 실행 됨
    => 이 때, 넘겨받은 인수를 코드의 this.____ 에 할당 됨

- 생성자에서는 this 키워드가 사용되기 전에, super(props)가 와야 함 !

✍️ 리액트 설치 : npx create-react-app ./ 
- npm 은 react 패키지를 local에 설치함
- npx 는 실행만 하고 저장 x (최신을 가져와서 사용하므로 버전 보장도 가능)
    - ./하면 해당 디렉토리에 설치하겠다는 것

- yarn 은 병렬설치 되어서 속도가 더 빠름 (npm은 직렬), 보안 좋음
    - 둘 다 사용해도 상관없음 !
    - 처음 yarn 시작했으면 계속 yarn 사용하는 게 좋음 ! 충돌가능성 ..

✍️ 리액트 실행 : npm run start

✔️ 확장프로그램 
    - ES7+ React/Redux/React-Native snippets 설치
        - class 컴포넌트 생성해줌 (rcc / rfc / rce + tab)

