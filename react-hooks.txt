⭐ React Hooks
- ReactConf 2018에서 발표
- class 없이 state를 사용할 수 있는 기능

📌 리액트 생명주기
- Mounting : 클래스형 componentDidMout() => 함수형 useEffect() 
- Updating
- Unmounting

=> hooks가 생기면서 생명주기를 사용할 수 있게 됨 !

📌 HOC (Higher Order Commponent)
- 컴포넌트를 인자로 받아 새로운 리액트 컴포넌트를 리턴하는 함수
    => 너무 많이 사용하면, Wrapper Component가 너무 많아짐 (깊어짐)
    => 해결 : Custom React Hooks 사용

- 화면에서 재사용 가능한 로직만을 분리해서 component로 만들고, 
    재사용 불가능한 UI와 같은 다른 부분들은 parameter로 받아서 처리하는 방법

✍️ useState
- state 정의 
    => const [A, setA] = usestate(""); 
- state 업데이트  
    => setA를 업데이트항 state Update

✍️ useEffect
- 컴포넌트가 렌더링 될 때, 특정 작업을 실행할 수 있도록 하는 Hook

📌 Memoization
- 비용이 많이 드는 함수 호출의 결과를 저장하고 동일한 입력이 다시 발생할 때,
    캐시 된 결과를 반환하여 컴퓨터 프로그램의 속도를 높이는 데 사용되는 최적화 기술

✍️ React.memo()
- 렌더링 속도 향상을 위한 방법 (리렌더링을 막기 위한 도구가 아닌, 성능개선 도구)
    => profiler를 사용하여 성능 확인 ! 
- React는 먼저 컴포넌트를 렌더링한 뒤, 이전 렌더링 결과와 비교하여 DOM업데이트 결정
    => 이 과정에서 컴포넌트가 React.memo()로 둘러 쌓여 있다면, 컴포넌트를 렌더링하고 결과를 메모이징(Memoizing) 함 
    => 다음 렌더링이 일어날 때, 렌더링하는 컴포넌트의 props가 같다면 메모이징을 재사용
- ⭐ props가 변경되지 않을 경우 사용 
    => props가 자주 변하는 컴포넌트는 사용하지 말 것 !
    => props 비교가 어차피 false를 반환하므로, 불필요한 비교과정을 거치게 됨

✍️ useCallback()
- 메모이제이션 된 함수를 반환하는 함수
    => const testFunction = useCallback(() => {}, []);
- 의존성 배열에 추가해준 state or props가 변하지 않는다면, 함수가 새로 생성되지 않도록 함
    => 메모리에 새로 할당되지 않고, 동일 참조 값을 사용하게 됨
- 의존성 배열에 아무것도 없다면, 컴포넌트가 최초 렌더링 시에만 함수가 생성됨
    => 이후에는 동일한 참조 값을 사용하는 함수가 됨
- ⭐ 자식 컴포넌트가 React.memo()로 최적화 되어 있고, 그 자식 컴포넌트에 해당 함수를 props로 넘겨줄 때 사용하는 것이 유용 !

✍️ useMemo()
- 메모이제이션 된 값을 반환
    => const result = useMemo(() => compute(a,b), [a,b]) return <div>{result}</div>